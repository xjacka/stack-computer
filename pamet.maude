fth TRIV is
	sort Elt .
endfth

view Int from TRIV to INT is
	sort Elt to Int .
endv

fmod MAP{X :: TRIV, Y :: TRIV} is
	protecting BOOL .
	sorts Entry{X,Y} Map{X,Y} .
	subsort Entry{X,Y} < Map{X,Y} .

	op _|->_ : X$Elt Y$Elt -> Entry{X,Y} [ctor] .
	op empty : -> Map{X,Y} [ctor] .
	op _,_ : Map{X,Y} Map{X,Y} -> Map{X,Y}
	   [ctor assoc comm id: empty prec 121 format (d r os d)] .
	op undefined : -> [Y$Elt] [ctor] .

	var D : X$Elt .
	var R : Y$Elt .
	var RR : Y$Elt .
	var M : Map{X,Y} .

	op insert : X$Elt Y$Elt Map{X,Y} -> Map{X,Y} .
	eq insert(D, R, (M, D |-> RR))
	= if $hasMapping(M, D)
	  then insert(D, R, M)
	  else (M, D |-> R)
	  fi .
	eq insert(D, R, M) = (M, D |-> R) [owise] .

	op $hasMapping : Map{X,Y} X$Elt -> Bool .
	eq $hasMapping((M, D |-> R), D) = true .
	eq $hasMapping(M, D) = false [owise] .

	op _[_] : Map{X,Y} X$Elt -> [Y$Elt] [prec 23] .
	eq (M, D |-> R)[D]
	= if $hasMapping(M, D) then undefined else R fi .
	eq M[D] = undefined [owise] .
endfm

fmod MEMORY is
	pr MAP{Nat, Int} .
endfm