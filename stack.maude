fth TRIV is
	sort Elt .
endfth

fmod STACK{X :: TRIV} is
	sorts NeStack{X} Stack{X} .
	subsort NeStack{X} < Stack{X} .

	op empty : -> Stack{X} [ctor] .
	op push : X$Elt Stack{X} -> NeStack{X} [ctor] .
	op pop : NeStack{X} -> Stack{X} .
	op top : NeStack{X} -> X$Elt .
	op isEmpty : Stack{X} -> Bool .

	var S : Stack{X} .
	var E : X$Elt .

	eq pop(push(E,S)) = S .
	eq top(push(E,S)) = E .
	eq isEmpty(empty) = true .
	eq isEmpty(push(E,S)) = false .
endfm

fmod STACK-ITEM is
	sort StackItem .
endfm

view StackItem from TRIV to STACK-ITEM is
	sort Elt to StackItem .
endv

fmod OP-STACK is
	pr INT .
	pr STACK-ITEM .
	sorts Address Value .
	subsort Address < StackItem .
	subsort Value < StackItem .

	op value(_) : Int -> Value [ctor] .
	op address(_) : Nat -> Address [ctor] .

    pr STACK{StackItem} .
endfm