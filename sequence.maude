load instruction.maude

fth TRIV is
	sort Elt .
endfth

fmod SEQUENCE is
	pr INT .
	pr INSTRUCTION .

	sort Sequence SequenceItem .

	subsort Instruction < SequenceItem .
	subsort SequenceItem < Sequence .

	op EOP : -> Sequence [ctor] .
	op _:_ : Int Instruction -> SequenceItem [ctor prec 3] .
	op _;_ : SequenceItem Sequence -> Sequence [ctor prec 4] .

endfm


fmod INSTRUCTION-SEQUENCE is
	pr SEQUENCE .

	var A : Instruction .
	var El : Int .
	var Lb : Int .
	var B : Sequence .
	var C : SequenceItem .

	op after(_,_) : Int Sequence -> Sequence .
	eq after(El, Lb : A ; B) = if El == Lb then Lb : A ; B else after(El, B) fi .
	eq after(El, C ; B) = after(El, B) .
endfm